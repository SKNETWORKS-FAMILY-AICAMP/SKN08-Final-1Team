plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

apply plugin: 'com.google.gms.google-services' // ✅ Google Sign-In 연동에 필요

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = 2
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0.1'
}

import java.util.Properties

println "Project Root Directory: ${rootProject.projectDir}"

// .env 파일 경로 확인
def envFile = file("${project.rootDir}/../.env")  // 프로젝트 루트 디렉토리인 flutter_ddd_test를 가리킴
println ".env file path: ${envFile}"

if (envFile.exists()) {
    def properties = new Properties()
    envFile.withReader("UTF-8") { reader ->
        properties.load(reader)
    }
    project.ext {
        KAKAO_NATIVE_APP_KEY = properties.getProperty("KAKAO_NATIVE_APP_KEY")
    }
} else {
    throw new GradleException(".env file not found")
}

// key.properties 경로 확인
def keystorePropertiesFile = file("${rootProject.projectDir}/key.properties")
println "key.properties path: ${keystorePropertiesFile.absolutePath}"

def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    println "keystoreProperties loaded successfully: ${keystoreProperties}"
} else {
    throw new GradleException("key.properties not found")
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
//apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    namespace = "com.jobstick"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.jobstick"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    def isWindows = System.getProperty("os.name").toLowerCase().contains("win")
    def debugKeyStorePath = isWindows ? 'C:/Users/Playdata/.android/jobstick/debug.keystore' : '/home/oem/.android/debug.keystore'
    def releaseKeyStorePath = isWindows ? 'C:/Users/Playdata/.android/jobstick/release-key.jks' : '/home/oem/.android/release-key.jks'
    println "Debug Keystore Path: ${debugKeyStorePath}"
    println "Release Keystore Path: ${releaseKeyStorePath}"

//    signingConfigs {
//        debug {
//            storeFile file(debugKeyStorePath)
////            storeFile file('/home/oem/.android/debug.keystore')  // debug 키스토어 경로
//            storePassword 'android'                              // debug 키스토어 비밀번호
//            keyAlias 'androiddebugkey'                           // debug 키 별칭
//            keyPassword 'android'                                // debug 키 비밀번호
//        }
//
//        release {
//            storeFile file(releaseKeyStorePath)
////            storeFile file('/home/oem/release-key.jks')         // release 키스토어 경로
//            storePassword 'your_keystore_password'              // release 키스토어 비밀번호
//            keyAlias 'your_key_alias'                           // release 키 별칭
//            keyPassword 'your_key_password'                     // release 키 비밀번호
//        }
//    }

    signingConfigs {
        debug {
            storeFile file(debugKeyStorePath)
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug  // debug 빌드에 debug 서명 사용
            debuggable true                     // 디버그 모드 활성화
            manifestPlaceholders = [
                    kakaoAppKey: project.KAKAO_NATIVE_APP_KEY,
                    applicationName: "android.app.Application"  // 추가된 값
            ]
        }

        release {
            signingConfig signingConfigs.release  // release 빌드에 release 서명 사용
            minifyEnabled true                   // 코드 난독화 활성화
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [
                    kakaoAppKey: project.KAKAO_NATIVE_APP_KEY,
                    applicationName: "android.app.Application"  // 추가된 값
            ]
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.jobstick"
        minSdkVersion 24
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        manifestPlaceholders = [
                kakaoAppKey: project.KAKAO_NATIVE_APP_KEY,
                applicationName: "android.app.Application"  // 수정
        ]
    }

//    buildTypes {
//        release {
//            // TODO: Add your own signing config for the release build.
//            // Signing with the debug keys for now, so `flutter run --release` works.
//            signingConfig = signingConfigs.debug
//        }
//    }
}

flutter {
    source = "../.."
}

apply plugin: 'com.google.gms.google-services' // ✅ 마지막에 한 번 더 명시 (중복되어도 안전함)